# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

import json
import boto3
import json
import os
logs_client = boto3.client('logs')
sns_client = boto3.client('sns')

def publish_to_sns(teams_message_json):
    sns_topic_arn = os.environ['SNS_TOPIC_ARN']
    chatbot_format = json.dumps(teams_message_json)
    publish_response = sns_client.publish(
            TopicArn=sns_topic_arn,
            Message=chatbot_format,
            Subject='AWS Chatbot Notification',
        )

def lambda_handler(event, context):
    # Code to fetch build details from the step function input generated by code build.
    cause = event["Cause"]
    cause_json = json.loads(cause)
    build = cause_json["Build"]
    build_id = build["Id"]
    build_arn = build["Arn"]
    build_number = build["BuildNumber"]
    build_status = build["BuildStatus"]
    project_name = build["ProjectName"]
    codebuild_link=f"https://console.aws.amazon.com/codesuite/codebuild/projects/{project_name}/build/{build_id}/details"
    log_group_name = build["Logs"]["GroupName"]
    log_stream_name = build["Logs"]["StreamName"]
    substring= "QUALITY GATE STATUS: FAILED"
    sonar_link=""

    # Code to check if the sonar scan has failed because of quality gate issue
    log_group_name = f"{log_group_name}"
    log_stream_name = f"{log_stream_name}"
    response = logs_client.get_log_events(
        logGroupName=log_group_name,
        logStreamName=log_stream_name)
    
    for event in response['events']:
        message = event['message']
        # Code to check if the search string is present in the log message
        if substring in message:
            sonar_link=message

    if substring in sonar_link:
        failed_reason = "The application has failed quality gate"
        teams_message_json = {
            "version": "1.0",
            "source": "custom",
            "textType": "client-markdown",
            "content": {
                "title": ":x: APPLICATION HAS FAILED IN CODE SECURITY SCAN",
                "description": "The uploaded code did not pass the security scan via sonarqube.",
                "nextSteps": [
                    f"{sonar_link}",
                    "Triage the vulnerabilities as mentioned in the document <https://docs.sonarsource.com/sonarcloud/digging-deeper/issues/| *here*>.",
                    f"Codebuild details <{codebuild_link}| *here*>",
                    "Click *APPROVE* to accept this build. Beware: potential poor code quality and security risks!"
              ],

            }  
                
        }

        publish_to_sns(teams_message_json)
        
        return {
            "build_id":build_id, 
            "build_arn": build_arn, 
            "build_number": build_number, 
            "build_status": build_status, 
            "project_name": project_name,
            "codebuild_link": codebuild_link,
            "failed_reason" : failed_reason,
            "sonar_link" : sonar_link
            }
    else:
        failed_reason = "The scan has failed due to a different reason"
        teams_message_json = {
            "version": "1.0",
            "source": "custom",
            "textType": "client-markdown",
            "content": {
                "title": ":x: APPLICATION SCAN PIPELINE HAS FAILED BECAUSE OF SOME OTHER REASON",
                "description": "The pipeline has failed because of some other reason.",
                "nextSteps": [
                    "Visit below link for further troubleshooting:",
                    f"{codebuild_link}"
              ],

            }  
                
        }

        publish_to_sns(teams_message_json)

        return { 
            "build_number": build_number, 
            "build_status": build_status, 
            "project_name": project_name,
            "codebuild_link": codebuild_link,
            "failed_reason" : failed_reason,
            }